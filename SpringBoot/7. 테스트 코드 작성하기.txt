# 테스트 코드란?
우리가 작성한 코드나 비즈니스 로직 자체를 테스트하기 위해 작성한 코드

## 테스트 코드 작성 이유
* **개발 과정에서 문제 미리 발견**
  * 일부러 오류가 발생할 수 있는 테스트 코드를 작성해 예외 처리가 잘 작동하는지 확인
  * 정확히 의도한 비즈니스 로직에 맞춰 테스트 코드를 작성해 결과가 잘 나오는지 검토
* **리팩토링 리스크 감소**
* **하나의 명세 문서로서의 기능 수행**
  * 테스트 코드를 통해 작성자의 의도 파악


테스트 방법은 여러 기준으로 분류 가능

테스트 대상 범위를 기준으로 구분 - 단위테스트(Unit Test) / 통합 테스트(Integration Test)


### 단위 테스트
애플리케이션의 개별 모듈을 독립적으로 테스트하는 방식
테스트 대상의 범위를 기준으로 가장 작은 단위의 테스트 방식
일반적으로 메서드 단위로 테스트 수행
테스트 비용이 적어 피드백 빠름

### 통합 테스트
애플리케이션을 구성하는 다양한 모듈을 결합해 전체적인 로직이 의도한 대로 동작하는지 테스트하는 방식
모듈을 통합하는 과정에서의 호환성 등을 포함해 애플리케이션이 정상적으로 동작하는지 확인하기 위해 수행하는 테스트 방식
데이터베이스나 네트워크 같은 외부 요인들을 포함하고 테스트 진행
테스트 비용이 큼

> 테스트 비용: 금전적인 비용 포함, 시간, 인력과 같은 개발에 필요한 것들 포괄
하나의 서비스를 개발할 때 개발 과정에서 60%, 테스트 과정에서 40% 비용이 든다

## 테스트 코드 작성 방법
### Given-When-Then 패턴
테스트 주도 개발에서 파생된 BDD(Behavior-Driven-Development: 행위 주도 개발)를 통해 탄생한 테스트 접근 방식.
#### Given
테스트 수행 전 테스트에 필요한 환경 설정을 하는 단계
테스트에 필요한 변수 정의, Mock 객체 통해 특정 상황에 대한 행동 정의
#### When
테스트의 목적을 보여주는 단계
실제 테스트 코드 포함
테스트를 통한 결과값을 가져옴
#### Then
테스트 결과를 검증하는 단계
When 단계에서 나온 결과 검증

## 좋은 테스트를 작성하는 5가지 속성(F.I.R.S.T)
* Fast 빠르게
* Isolated 고립된, 독립적
  * 하나의 테스트 코드는 목적으로 여기는 하나의 대상에 대해서만 수행
* Repeatable 반복 가능한
* Self-Validating 자가 검증
  * 테스트 그 자체만으로 테스트 검증이 완료돼야 함
* Timely 적시에
  * 애플리케이션 코드 구현 전에 테스트 코드 완성 (테스트 주도 개발)
  


## JUnit을 활용한 테스트 코드 작성
### JUnit이란?
자바 언어에서 사용되는 대표적인 테스트 프레임워크, 테스트를 위한 도구 제공

어노테이션 기반의 테스트 방식을 지원하는 것이 가장 큰 특징

### JUnit의 생명주기
* @Test : 테스트 코드를 포함한 메서드 정의
* @BeforeAll : 테스트 시작 전 호출되는 메서드 정의
* @BeforeEach : 각 테스트 메서드가 실행되기 전 동작하는 메서드 정의
* @AfterAll : 테스트를 종료하면서 호출되는 메서드 정의
* @AfterEach : 각 테스트 메서드가 종료되면서 호출되는 메서드 정의


* @WebMvcTest(테스트 대상 클래스.class)
웹에서 사용되는 요청과 응답에 대한 테스트 수행. 대상 클래스만 로드해 테스트 수행, 대상 클래스 추가하지 않으면 컨트롤러 관련 빈 객체 모두 로드
@SpringBootTest보다 가볍게 테스트하기 위해 사용 (슬라이스 테스트 - 레이어드 아키텍처를 기준으로 각 레이어별로 나누어 테스트 진행)
* @MockBean
실제 빈 객체가 아닌 Mock(가짜) 객체를 생성해 주입하는 역할 수행
실제 행위X -> 개발자가 Mockito의 given() 메서드를 통해 동작 정의
* @Test
테스트 코드가 포함돼 있다고 선언하는 어노테이션
JUnit Jupiter에서 이 어노테이션을 감지해 테스트 계획에 포함시킴
* @DisplayName
테스트에 대한 표현 정의



# 테스트 주도 개발(TDD)
TDD란?
Test-Driven Development의 약자. 테스트 주도 개발
반복 테스트를 이용한 소프트웨어 개발 방법론
테스트 코드를 먼저 작성 후 테스트를 통과하는 코드를 작성하는 과정을 반복
애자일 방법론 중 하나인 익스트림 프로그래밍(eXtream Programming)의 Test-First 개념에 기반을 둔, 개발 주기가 짧은 개발 프로세스. 단순한 설계 중시

> 애자일 소프트웨어 개발 방법론이란?
신속한 반복 작업을 통해 실제 작동 가능한 소프트웨어를 개발하는 개발 방식
신속한 개발 프로세스를 통해 수시로 변하는 고객의 요구사항에 대응해서 제공하는 서비스 가치 극대화

## 테스트 주도 개발의 개발 주기
* 실패 테스트 작성(Write a failing test): 실패하는 경우의 테스트 코드 먼저 작성
* 테스트를 통과하는 코드 작성(Make a test pass): 테스트 코드를 성공시키기 위한 실제 코드 작성
* 리팩토링(Refactor): 중복 코드 제거 또는 일반화하는 리팩토링 수행

#### 효과
* 디버깅 시간 단축
* 생산성 향상
* 재설계 시간 단축
* 기능 추가와 같은 추가 구현 용이
