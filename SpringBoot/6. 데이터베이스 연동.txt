ORM
Object Relational Mapping
객체 관계 매핑

객체와 RDB(Relational Database)의 테이블을 자동으로 매핑하는 방법
객체 = 클래스
클래스는 데이터베이스의 테이블과 매핑하기 위해 만들어진 것이 아니기 때문에 RDB 테이블과 어쩔 수 없는 불일치 존재.
ORM은 이 둘의 불일치와 제약사항을 해결하는 역할.

ORM 장점
데이터베이스 쿼리를 객체지향적으로 조작.
재사용 및 유지보수 편리.
데이터베이스에 대한 종속성 줄어듦.

ORM 단점
ORM만으로 온전한 서비스를 구현하기에는 한계가 있음.
- 복잡한 서비스의 경우 직접 쿼리를 구현하지 않고 코드로 구현하기 어려움
- 복잡한 쿼리를 정확한 설계 없이 ORM만으로 구성하게 되면 속도 저하 등 성능 문제 발생 가능


JPA
Java Persistence API
자바 진영의 ORM 기술 표준으로 채택된 인터페이스 모음
내부적으로 JDBC 사용

하이버네이트
JPA 기반의 구현체
자바의 ORM 프레임워크
* Spring Data JPA
  CRUD 처리에 필요한 인터페이스 제공
  하이버네이트에서 자주 사용되는 기능을 더 쉽게 사용하도록 구현한 라이브러리
  하이버네이트의 엔티티 매니저를 직접 다루지 않고 리포지토리를 정의해 사용함으로써 스프링이 적합한 쿼리를 동적으로 생성하는 방식으로 데이터베이스 조작.


영속성 컨텍스트
애플리케이션과 데이터베이스 사이에서 엔티티와 레코드의 괴리를 해소하는 기능, 객체를 보관하는 기능 수행
엔티티 객체가 영속성 컨텍스트에 들어와 JPA의 관리 대상이 되는 시점부터는 영속 객체.
세션 단위의 생명주기 가짐. 데이터베이스 접근을 위한 세션이 생성되면 영속성 컨텍스트 생성, 세션 종료되면 영속성 컨텍스트 없어짐.
엔티티 매니저는 이러한 일련의 과정에서 영속성 컨텍스트에 접근하기 위한 수단으로 사용됨.

* 엔티티 매니저
  엔티티를 관리하는 객체
  데이터베이스에 접근해 CRUD 작업 수행
  Spring Data JPA를 사용하면 리포지토리를 사용해 데이터베이스 접근, 실제 내부 구현체인 SimpleJpaRepository가 리포지토리에서 엔티티 매니저를 사용함.
  엔티티 매니저는 엔티티 매니저 팩토리가 만듦, 엔티티 매니저 팩토리는 애플리케이션에서 단 하나만 생성, 모든 엔티티가 공유해 사용
  엔티티 매니저 팩토리로 생성된 엔티티 매니저는 엔티티를 영속성 컨텍스트에 추가해 영속 객체로 만드는 작업 수행, 영속성 컨텍스트와 데이터베이스를 비교하며 실제 데이터베이스를 대상으로 작업 수행.

* 엔티티 생명주기
  - 비영속
  - 영속
  - 준영속
  - 삭제
  