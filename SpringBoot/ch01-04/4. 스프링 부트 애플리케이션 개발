4.2 pom.xml(Project Object Model)
  메이븐 기능 사용을 위한 작성 파일.
  프로젝트, 의존성 라이브러리, 빌드 등 정보 및 해당 프로젝트 관리에 필요한 내용 기술

4.2.1 빌드 관리 도구
  JVM이나 WAS가 프로젝트를 인식하고 실행할 수 있게 우리가 작성한 소스코드와 프로젝트에 사용될 파일들(.xml, .jar, .properties)을 빌드하는 도구

4.2.2 메이븐
  아파치 메이븐은 자바 기반의 프로젝트를 빌드하고 관리하는 데 사용하는 도구
  
  메이븐 대표 기능
  * 프로젝트 관리: 프로젝트 버전과 아티팩트 관리
  * 빌드 및 패키징: 의존성 관리, 설정된 패키지 형식으로 빌드 수행
  * 테스트: 빌드 수행 전 단위 테스트를 통해 작성된 애플리케이션 코드의 정상 동작 여부 확인
  * 배포: 빌드가 완료된 패키지를 원격 저장소에 배포

  * 메이븐의 생명주기
  메이븐의 기능은 생명주기 순서에 따라 관리, 동작
  특정 단계를 수행하기 위해선 이전 단계를 마쳐야 함
  1. 기본 생명주기(Default Lifecycle)
    - validate: 프로젝트를 빌드하는 데 필요한 모든 정보를 사용할 수 있는지 검토
    - compile: 프로젝트의 소스코드 컴파일
    - test: 단위 테스트 프레임워크를 사용해 테스트 실행
    - package: 컴파일한 코드를 가져와 JAR 등의 형식으로 패키징 수행
    - verify: 패키지가 유효하며 일정 기준을 충족하는지 확인
    - install: 프로젝트를 사용하는 데 필요한 패키지를 로컬 저장소에 설치
    - deploy: 프로젝트를 통합 또는 릴리스 환경에서 다른 곳에 공유하기 위해 원격 저장소에 패키지 복사
  2. 클린 생명주기(Clean Lifecycle)
    - clean: 이전 빌드가 생성한 모든 파일 제거
  3. 사이트 생명주기(Site Lifecycle)
    - site: 메이븐의 설정 파일 정보를 기반으로 프로젝트의 문서 사이트 생성
    - site-deploy: 생성된 사이트 문서를 웹 서버에 배포
  
4.3.1 컨트롤러 작성
  컨트롤러에 포함된 로직에서는 애플리케이션의 사용자 또는 클라이언트가 입력한 값에 대한 응답 수행.
  특별한 경우를 제외한 모든 요청은 컨트롤러를 통해 진행
  