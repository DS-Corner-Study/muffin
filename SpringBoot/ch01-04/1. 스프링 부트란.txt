1.1 스프링 프레임워크
  스프링의 핵심가치
  "애플리케이션 개발에 필요한 기반을 제공해서 개발자가 비즈니스 로직 구현에만 집중할 수 있게끔 하는 것"

1.1.1 제어 역전(IoC)
  사용하려는 객체 선언 -> 해당 객체의 의존성 생성 -> 객체에서 제공하는 기능 사용
  객체를 생성하고 사용하는 일련의 작업을 개발자가 직접 제어하는 구조

  @RestController
  public class NoDIController {

    private MyService service = new MyServiceImpl();

    @GetMapping("/no-di/hello")
    public String getHello() {
        return service.getHello();
    }

  }

  IoC를 적용한 환경에서는 사용할 객체를 직접 생성하지 않고 객체의 생명주기 관리를 외부에 위임함.
  외부 - 스프링 컨테이너 또는 IoC 컨테이너
  제어 역전: 객체의 관리를 컨테이너에 맡겨 제어권이 넘어간 것
  제어 역전을 통해 의존성 주입(DI; Dependency Injection), 관점 지향 프로그래밍(AOP; Aspect-Oriented Programming)

1.1.2 의존성 주입(DI)
  제어 역전의 방법 중 하나.
  사용할 객체를 직접 생성하지 않고 외부 컨테이너가 생성한 객체를 주입받아 사용하는 방식

  의존성 주입 방법
  1. 생성자를 통한 의존성 주입
  2. 필드 객체 선언을 통한 의존성 주입
  3. setter 메서드를 통한 의존성 주입

  스프링에서는 @Autowired 어노테이션을 통해 의존성 주입

  * 생성자를 통한 의존성 주입 => 권장
    레퍼런스 객체 없이는 객체를 초기화할 수 없게 설계할 수 있기 때문

    @RestController
    public class DIController {

      MyService myService;

      @Autowired
      public DIController(MyService myService) {
          this.myService = myService;
      }

      @GetMapping("/di/hello")
      public String getHello() {
          return myService.getHello();
      }

    }

  * 필드 객체 선언을 통한 의존성 주입
    @RestController
    public class FieldInjectionController {

        @Autowired
        private MyService myService;

    }

  * setter 메서드르 통한 의존성 주입
    @RestController
    public class SetterInjectionController {

        MyService myService;

        @Autowired
        public void setMyService(MyService myService) {
            this.myService = myService;
        }

    }

1.1.3 관점 지향 프로그래밍(AOP)
  관점을 기준으로 묶어 개발하는 방식.
  관점- 핵심 기능, 부가 기능으로 구분
  핵심 기능: 비즈니스 로직 구현 과정에서 비즈니스 로직이 처리하려는 목적 기능
  부가 기능: 핵심 기능이 어떤 기능인지에 무관하게 로직이 수행되기 전 또는 후에 수행되기만 하면 됨

  AOP: 여러 비즈니스 로직에서 반복되는 부가 기능을 하나의 공통 로직으로 처리하도록 모듈화해 삽입하는 방식

  AOP 구현 방법
  1. 컴파일 과정에 삽입
  2. 바이트코드를 메모리에 로드하는 과정에 삽입
  3. 프락시 패턴 이용 -> 스프링

  목적: 모듈화하여 재사용 가능한 구성을 만드는 것, 개발자가 비즈니스 로직을 구현하는 데만 집중


1.2 스프링 부트
1.2.1 의존성 관리
  spring-boot-starter 라이브러리
  * spring-boot-starter-web: 스프링 MVC를 사용하는 RESTful 애플리케이션을 만들기 위한 의존성. 기본으로 내장 톰캣이 포함돼 있어 jar 형식으로 실행 가능.
  * spring-boot-starter-test: JUnit, Jupiter, Mockito 등의 테스트용 라이브러리 포함.
  * spring-boot-starter-jdbc: HikariCP 커넥션 풀을 활용한 JDBC 기능 제공.
  * spring-boot-starter-security: 스프링 시큐리티(인증, 권한, 인가 등) 기능 제공.
  * spring-boot-starter-data-jpa: 하이버네이트를 활용한 JPA 기능 제공.
  * spring-boot-starter-cache: 스프링 프레임워크의 캐시 기능 지원.

1.2.2 자동 설정
  @SpringBootApplication 어노테이션
  * @SpringBootConfiguration
  * @EnableAutoConfiguration
  * @ComponentScan -> @Component 시리즈 어노테이션이 붙은 클래스를 발견해 빈 등록.
                      * @Controller, @RestController, @Service, @Repository, @Configuration

1.2.3 내장 WAS
  스프링 부트의 각 웹 애플리케이션에는 내장 WAS(Web Application Server) 존재.
  spring-boot-starter-web -> 톰캣 내장

1.2.4 모니터링
  Spring Boot Actuator - 스프링 부트 자체 모니터링 도구(스레드, 메모리 세션 등 주요 요소 모니터링)
